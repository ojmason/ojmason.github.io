<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Narrative on Arguable Intelligence</title>
    <link>https://ojmason.github.io/categories/narrative/index.xml</link>
    <description>Recent content in Narrative on Arguable Intelligence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>(C) Oliver Mason</copyright>
    <atom:link href="https://ojmason.github.io/categories/narrative/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>National Novel Generation Month -- Day 1</title>
      <link>https://ojmason.github.io/blog/national-novel-generation-month----day-1/</link>
      <pubDate>Wed, 01 Nov 2017 22:29:36 +0000</pubDate>
      
      <guid>https://ojmason.github.io/blog/national-novel-generation-month----day-1/</guid>
      <description>&lt;p&gt;I have this year finally managed to have a go at NaNoGenMo, the attempt to write code to generate a novel, in analogy
to NaNoWriMo, where people try to actually write a novel themselves (which sounds like rather a lot of hard
work). Instead, I will instruct the computer to do it for me.&lt;/p&gt;

&lt;p&gt;My approach will consist of various stages, and at the top level I am planning to generate a broad and abstract
sequence of events that will be fleshed out in subsequent stages. I have chosen the framework of
&lt;a href=&#34;https://en.wikipedia.org/wiki/Vladimir_Propp&#34;&gt;Vladimir Propp&lt;/a&gt;, who analysed Russian folk tales and came up with
a list of 31 &lt;em&gt;narrative functions&lt;/em&gt;, which can be grouped into four distinct sections. I&amp;rsquo;m generating a list of
sections, where each section can have up to four functions, and then I pick the appropriate number of functions
randomly from the list of functions for each section.&lt;/p&gt;

&lt;p&gt;There are some constraints, so you cannot have a &lt;em&gt;return&lt;/em&gt; unless you also had a &lt;em&gt;departure&lt;/em&gt; beforehand. I have
implemented a very simple routine which churns out sequences that fulfil their constraints. Quite primitive at
the moment, but perhaps a starting point.&lt;/p&gt;

&lt;p&gt;Some example outputs (for their meaning see the Wikipedia link above) are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(complicity trickery departure departure villany first-donor-func hero-reaction wedding pursuit)&lt;br /&gt;
This is a bit weird, as there are two departures (but they could be different people), and after
the &lt;em&gt;wedding&lt;/em&gt; there is a &lt;em&gt;pursuit&lt;/em&gt;, so the hero is chased away by a villain after he got married
and rewarded/promoted. Strange, but perhaps leading to an interesting story!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(interdiction trickery interdiction trickery departure departure departure first-donor-func struggle struggle transfiguration difficult-task)&lt;br /&gt;
Here the hero gets a warning/command twice, and each time a villain attempts some deception. This time,
&lt;em&gt;three&lt;/em&gt; people leave (I think that needs to be cut down to single occurrence only!) and a lot of fighting
is happening.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thing is, I can imagine writing a story around those functions. The
challenge is to see if the computer can do that, too. Still early
days.  The main concern with this whole thing is that the generated
novel will either be trivial and boring, or non-sensical and
incoherent. Probably even both. I am under no illusions that the final result will be worthwhile
reading; but I will only find out at the end!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>